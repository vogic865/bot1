import asyncio
import nest_asyncio
from telegram import Update
from telegram.ext import ApplicationBuilder, ContextTypes, MessageHandler, filters

# –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ç—á –¥–ª—è asyncio
nest_asyncio.apply()

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
BOT_TOKEN = '7714387405:AAEaeoA0nwiHkj7uRKXI1jzoHbDW0BAYEQM'
SOURCE_CHANNEL_ID = -1002392464060  # ID –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
TARGET_CHAT_IDS = [
    -1002644440071,   # –ö–∞–Ω–∞–ª 1
    269504433         # –ß–∞—Ç
]
MY_USER_ID = 269504433  # –¢–≤–æ–π ID –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª–µ –∏ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ===
async def forward_post(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.channel_post:  # –≠—Ç–æ –ø–æ—Å—Ç –∏–∑ –∫–∞–Ω–∞–ª–∞
        if update.channel_post.chat.id == SOURCE_CHANNEL_ID:
            print("‚úÖ –≠—Ç–æ –Ω—É–∂–Ω—ã–π –∫–∞–Ω–∞–ª. –ü–µ—Ä–µ—Å—ã–ª–∞—é —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–æ –≤—Å–µ —Ü–µ–ª–µ–≤—ã–µ —á–∞—Ç—ã...")
            message_id = update.channel_post.message_id
            from_chat_id = update.channel_post.chat.id

            for chat_id in TARGET_CHAT_IDS:
                try:
                    await context.bot.forward_message(
                        chat_id=chat_id,
                        from_chat_id=from_chat_id,
                        message_id=message_id
                    )
                    print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –≤ {chat_id}")

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–µ–±–µ
                    try:
                        await context.bot.send_message(
                            chat_id=MY_USER_ID,
                            text=f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ {from_chat_id} —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –≤ {chat_id} (ID —Å–æ–æ–±—â–µ–Ω–∏—è: {message_id})"
                        )
                    except Exception as e:
                        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")

                except Exception as e:
                    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å–ª–∞—Ç—å –≤ {chat_id}: {e}")
        else:
            print("‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞")
    else:  # –≠—Ç–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–µ –∏–∑ –∫–∞–Ω–∞–ª–∞)
        user_id = update.effective_user.id
        if user_id != MY_USER_ID:
            print(f"üö´ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}. –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º.")
            return

        print(f"üì© –ü–æ–ª—É—á–µ–Ω–æ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {update.effective_user.name}: {update.message.text}")

# === –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ ===
async def post_init(app):
    try:
        await app.bot.send_message(chat_id=MY_USER_ID, text="‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        print("‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
    except Exception as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ: {e}")

# === –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ ===
async def main():
    app = ApplicationBuilder().token(BOT_TOKEN).post_init(post_init).build()
    app.add_handler(MessageHandler(filters.ALL, forward_post))
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã...")
    await app.run_polling()

# –ó–∞–ø—É—Å–∫
if __name__ == '__main__':
    asyncio.run(main())
